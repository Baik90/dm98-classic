
@BaseClass = BaseProperties_facepunch_dm98
[
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	parentAttachmentName(parentAttachment) [ group="Hierarchy" ] : "Parent Model Bone/Attachment Name" : : "The name of the bone or attachment to attach to on the entity's parent in the movement hierarchy. Use !bonemerge to use bone-merge style attachment."

	useLocalOffset(boolean) [ group="Hierarchy" ] : "Use Model Attachment offsets" : 0 : "Whether to respect the specified local offset when doing the initial hierarchical attachment to its parent."
	local.origin(vector) [ group="Hierarchy" ] : "Model Attachment position offset" : : "Offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.angles(angle) [ group="Hierarchy" ] : "Model Attachment angular offset" : : "Angular offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.scales(vector) [ group="Hierarchy" ] : "Model Attachment scale" : : "Scale in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	tags(tags) : "Tags" : "" : "A list of general purpose tags for this entity, for interactions with other entities such as triggers."
]

//
// DeathmatchGame
//
@PointClass base(BaseProperties_facepunch_dm98) = dm98 : "This is the heart of the gamemode. It's responsible for creating the player and stuff."
[
]

//
// ChargerStation
//
@PointClass base(BaseProperties_facepunch_dm98) tags( SupportsSolids ) editormodel( "models/gameplay/charger/charger_station.vmdl" ) model() = dm_healthcharger : "This charger gradually replenishes the player's health on use. Once out of charge, it will recharge after a set time."
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "models/gameplay/charger/charger_station.vmdl" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	chargerpower(float) : "Charger Power" : "50" : "This controls the amount of charge in the station, Default Value is 50."
	chargerresettime(float) : "Charger Reset Time" : "60" : "This controls the time it takes for the charger to refill, Default Value is 60."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Crossbow
//
@PointClass base(BaseProperties_facepunch_dm98) editormodel( "weapons/rust_crossbow/rust_crossbow.vmdl" ) = dm_crossbow : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Crowbar
//
@PointClass base(BaseProperties_facepunch_dm98) editormodel( "weapons/rust_pistol/rust_pistol.vmdl" ) = dm_crowbar : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// GrenadeWeapon
//
@PointClass base(BaseProperties_facepunch_dm98) editormodel( "weapons/rust_pistol/rust_pistol.vmdl" ) = dm_grenade : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Pistol
//
@PointClass base(BaseProperties_facepunch_dm98) editormodel( "weapons/rust_pistol/rust_pistol.vmdl" ) = dm_pistol : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Python
//
@PointClass base(BaseProperties_facepunch_dm98) editormodel( "weapons/rust_pistol/rust_pistol.vmdl" ) = dm_357 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Shotgun
//
@PointClass base(BaseProperties_facepunch_dm98) editormodel( "weapons/rust_pumpshotgun/rust_pumpshotgun.vmdl" ) = dm_shotgun : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// SMG
//
@PointClass base(BaseProperties_facepunch_dm98) editormodel( "weapons/rust_smg/rust_smg.vmdl" ) = dm_smg : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TripmineWeapon
//
@PointClass base(BaseProperties_facepunch_dm98) editormodel( "models/dm_tripmine.vmdl" ) = dm_tripmine : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

